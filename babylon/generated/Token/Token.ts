// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get _receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LockedBalance extends ethereum.Event {
  get params(): LockedBalance__Params {
    return new LockedBalance__Params(this);
  }
}

export class LockedBalance__Params {
  _event: LockedBalance;

  constructor(event: LockedBalance) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxSupplyAllowedAfterChanged extends ethereum.Event {
  get params(): MaxSupplyAllowedAfterChanged__Params {
    return new MaxSupplyAllowedAfterChanged__Params(this);
  }
}

export class MaxSupplyAllowedAfterChanged__Params {
  _event: MaxSupplyAllowedAfterChanged;

  constructor(event: MaxSupplyAllowedAfterChanged) {
    this._event = event;
  }

  get previousAllowedAfterValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAllowedAfterValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxSupplyChanged extends ethereum.Event {
  get params(): MaxSupplyChanged__Params {
    return new MaxSupplyChanged__Params(this);
  }
}

export class MaxSupplyChanged__Params {
  _event: MaxSupplyChanged;

  constructor(event: MaxSupplyChanged) {
    this._event = event;
  }

  get previousMaxValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMaxValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MintedNewTokens extends ethereum.Event {
  get params(): MintedNewTokens__Params {
    return new MintedNewTokens__Params(this);
  }
}

export class MintedNewTokens__Params {
  _event: MintedNewTokens;

  constructor(event: MintedNewTokens) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokensminted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLockout extends ethereum.Event {
  get params(): NewLockout__Params {
    return new NewLockout__Params(this);
  }
}

export class NewLockout__Params {
  _event: NewLockout;

  constructor(event: NewLockout) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenslocked(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isTeamOrAdvisor(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get startingVesting(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endingVesting(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewRewardsDistributorRegistration extends ethereum.Event {
  get params(): NewRewardsDistributorRegistration__Params {
    return new NewRewardsDistributorRegistration__Params(this);
  }
}

export class NewRewardsDistributorRegistration__Params {
  _event: NewRewardsDistributorRegistration;

  constructor(event: NewRewardsDistributorRegistration) {
    this._event = event;
  }

  get previousAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewTimeLockRegistration extends ethereum.Event {
  get params(): NewTimeLockRegistration__Params {
    return new NewTimeLockRegistration__Params(this);
  }
}

export class NewTimeLockRegistration__Params {
  _event: NewTimeLockRegistration;

  constructor(event: NewTimeLockRegistration) {
    this._event = event;
  }

  get previousAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Token__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFromBlock(): BigInt {
    return this.value0;
  }

  getVotes(): BigInt {
    return this.value1;
  }
}

export class Token__getCheckpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFromBlock(): BigInt {
    return this.value0;
  }

  getVotes(): BigInt {
    return this.value1;
  }
}

export class Token__maxSupplyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Token__vestedTokenResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTeamOrAdvisor(): boolean {
    return this.value0;
  }

  getVestingBegin(): BigInt {
    return this.value1;
  }

  getVestingEnd(): BigInt {
    return this.value2;
  }

  getLastClaim(): BigInt {
    return this.value3;
  }
}

export class Token extends ethereum.SmartContract {
  static bind(address: Address): Token {
    return new Token("Token", address);
  }

  BABLTokenDeploymentTimestamp(): BigInt {
    let result = super.call(
      "BABLTokenDeploymentTimestamp",
      "BABLTokenDeploymentTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BABLTokenDeploymentTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BABLTokenDeploymentTimestamp",
      "BABLTokenDeploymentTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_SUPPLY_CAP(): i32 {
    let result = super.call("MAX_SUPPLY_CAP", "MAX_SUPPLY_CAP():(uint8)", []);

    return result[0].toI32();
  }

  try_MAX_SUPPLY_CAP(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_SUPPLY_CAP",
      "MAX_SUPPLY_CAP():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MINT_CAP(): i32 {
    let result = super.call("MINT_CAP", "MINT_CAP():(uint8)", []);

    return result[0].toI32();
  }

  try_MINT_CAP(): ethereum.CallResult<i32> {
    let result = super.tryCall("MINT_CAP", "MINT_CAP():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, rawAmount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(rawAmount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    spender: Address,
    rawAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(rawAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelVestedTokens(lockedAccount: Address): BigInt {
    let result = super.call(
      "cancelVestedTokens",
      "cancelVestedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(lockedAccount)]
    );

    return result[0].toBigInt();
  }

  try_cancelVestedTokens(lockedAccount: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancelVestedTokens",
      "cancelVestedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(lockedAccount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeMaxSupply(
    newMaxSupply: BigInt,
    newMaxSupplyAllowedAfter: BigInt
  ): boolean {
    let result = super.call(
      "changeMaxSupply",
      "changeMaxSupply(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newMaxSupply),
        ethereum.Value.fromUnsignedBigInt(newMaxSupplyAllowedAfter)
      ]
    );

    return result[0].toBoolean();
  }

  try_changeMaxSupply(
    newMaxSupply: BigInt,
    newMaxSupplyAllowedAfter: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeMaxSupply",
      "changeMaxSupply(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(newMaxSupply),
        ethereum.Value.fromUnsignedBigInt(newMaxSupplyAllowedAfter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkpoints(param0: Address, param1: BigInt): Token__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Token__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Token__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Token__checkpointsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegates(param0: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCheckpoints(account: Address, id: BigInt): Token__getCheckpointsResult {
    let result = super.call(
      "getCheckpoints",
      "getCheckpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return new Token__getCheckpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCheckpoints(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<Token__getCheckpointsResult> {
    let result = super.tryCall(
      "getCheckpoints",
      "getCheckpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Token__getCheckpointsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getCurrentVotes(account: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelegatee(account: Address): Address {
    let result = super.call("getDelegatee", "getDelegatee(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddress();
  }

  try_getDelegatee(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegatee",
      "getDelegatee(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMyDelegatee(): Address {
    let result = super.call("getMyDelegatee", "getMyDelegatee():(address)", []);

    return result[0].toAddress();
  }

  try_getMyDelegatee(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMyDelegatee",
      "getMyDelegatee():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumberOfCheckpoints(account: Address): BigInt {
    let result = super.call(
      "getNumberOfCheckpoints",
      "getNumberOfCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfCheckpoints(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfCheckpoints",
      "getNumberOfCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriorVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeLockRegistry(): Address {
    let result = super.call(
      "getTimeLockRegistry",
      "getTimeLockRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTimeLockRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTimeLockRegistry",
      "getTimeLockRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedBalance(account: Address): BigInt {
    let result = super.call(
      "lockedBalance",
      "lockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_lockedBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedBalance",
      "lockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSupply(): Token__maxSupplyResult {
    let result = super.call("maxSupply", "maxSupply():(uint96,uint256)", []);

    return new Token__maxSupplyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_maxSupply(): ethereum.CallResult<Token__maxSupplyResult> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint96,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Token__maxSupplyResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  maxSupplyAllowed(): BigInt {
    let result = super.call(
      "maxSupplyAllowed",
      "maxSupplyAllowed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSupplyAllowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSupplyAllowed",
      "maxSupplyAllowed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSupplyAllowedAfter(): BigInt {
    let result = super.call(
      "maxSupplyAllowedAfter",
      "maxSupplyAllowedAfter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSupplyAllowedAfter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSupplyAllowedAfter",
      "maxSupplyAllowedAfter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(_to: Address, _amount: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_mint(_to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintingAllowedAfter(): BigInt {
    let result = super.call(
      "mintingAllowedAfter",
      "mintingAllowedAfter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintingAllowedAfter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintingAllowedAfter",
      "mintingAllowedAfter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerLockup(
    _receiver: Address,
    _amount: BigInt,
    _profile: boolean,
    _vestingBegin: BigInt,
    _vestingEnd: BigInt,
    _lastClaim: BigInt
  ): boolean {
    let result = super.call(
      "registerLockup",
      "registerLockup(address,uint256,bool,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_profile),
        ethereum.Value.fromUnsignedBigInt(_vestingBegin),
        ethereum.Value.fromUnsignedBigInt(_vestingEnd),
        ethereum.Value.fromUnsignedBigInt(_lastClaim)
      ]
    );

    return result[0].toBoolean();
  }

  try_registerLockup(
    _receiver: Address,
    _amount: BigInt,
    _profile: boolean,
    _vestingBegin: BigInt,
    _vestingEnd: BigInt,
    _lastClaim: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerLockup",
      "registerLockup(address,uint256,bool,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_profile),
        ethereum.Value.fromUnsignedBigInt(_vestingBegin),
        ethereum.Value.fromUnsignedBigInt(_vestingEnd),
        ethereum.Value.fromUnsignedBigInt(_lastClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsDistributor(): Address {
    let result = super.call(
      "rewardsDistributor",
      "rewardsDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardsDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsDistributor",
      "rewardsDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setRewardsDistributor(newRewardsDistributor: Address): boolean {
    let result = super.call(
      "setRewardsDistributor",
      "setRewardsDistributor(address):(bool)",
      [ethereum.Value.fromAddress(newRewardsDistributor)]
    );

    return result[0].toBoolean();
  }

  try_setRewardsDistributor(
    newRewardsDistributor: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setRewardsDistributor",
      "setRewardsDistributor(address):(bool)",
      [ethereum.Value.fromAddress(newRewardsDistributor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setTimeLockRegistry(newTimeLockRegistry: Address): boolean {
    let result = super.call(
      "setTimeLockRegistry",
      "setTimeLockRegistry(address):(bool)",
      [ethereum.Value.fromAddress(newTimeLockRegistry)]
    );

    return result[0].toBoolean();
  }

  try_setTimeLockRegistry(
    newTimeLockRegistry: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setTimeLockRegistry",
      "setTimeLockRegistry(address):(bool)",
      [ethereum.Value.fromAddress(newTimeLockRegistry)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timeLockRegistry(): Address {
    let result = super.call(
      "timeLockRegistry",
      "timeLockRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_timeLockRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "timeLockRegistry",
      "timeLockRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockedBalance(account: Address): BigInt {
    let result = super.call(
      "unlockedBalance",
      "unlockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_unlockedBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockedBalance",
      "unlockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestedToken(param0: Address): Token__vestedTokenResult {
    let result = super.call(
      "vestedToken",
      "vestedToken(address):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Token__vestedTokenResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_vestedToken(
    param0: Address
  ): ethereum.CallResult<Token__vestedTokenResult> {
    let result = super.tryCall(
      "vestedToken",
      "vestedToken(address):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Token__vestedTokenResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  viewLockedBalance(account: Address): BigInt {
    let result = super.call(
      "viewLockedBalance",
      "viewLockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_viewLockedBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewLockedBalance",
      "viewLockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rawAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelVestedTokensCall extends ethereum.Call {
  get inputs(): CancelVestedTokensCall__Inputs {
    return new CancelVestedTokensCall__Inputs(this);
  }

  get outputs(): CancelVestedTokensCall__Outputs {
    return new CancelVestedTokensCall__Outputs(this);
  }
}

export class CancelVestedTokensCall__Inputs {
  _call: CancelVestedTokensCall;

  constructor(call: CancelVestedTokensCall) {
    this._call = call;
  }

  get lockedAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelVestedTokensCall__Outputs {
  _call: CancelVestedTokensCall;

  constructor(call: CancelVestedTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeMaxSupplyCall extends ethereum.Call {
  get inputs(): ChangeMaxSupplyCall__Inputs {
    return new ChangeMaxSupplyCall__Inputs(this);
  }

  get outputs(): ChangeMaxSupplyCall__Outputs {
    return new ChangeMaxSupplyCall__Outputs(this);
  }
}

export class ChangeMaxSupplyCall__Inputs {
  _call: ChangeMaxSupplyCall;

  constructor(call: ChangeMaxSupplyCall) {
    this._call = call;
  }

  get newMaxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMaxSupplyAllowedAfter(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeMaxSupplyCall__Outputs {
  _call: ChangeMaxSupplyCall;

  constructor(call: ChangeMaxSupplyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimMyTokensCall extends ethereum.Call {
  get inputs(): ClaimMyTokensCall__Inputs {
    return new ClaimMyTokensCall__Inputs(this);
  }

  get outputs(): ClaimMyTokensCall__Outputs {
    return new ClaimMyTokensCall__Outputs(this);
  }
}

export class ClaimMyTokensCall__Inputs {
  _call: ClaimMyTokensCall;

  constructor(call: ClaimMyTokensCall) {
    this._call = call;
  }
}

export class ClaimMyTokensCall__Outputs {
  _call: ClaimMyTokensCall;

  constructor(call: ClaimMyTokensCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get prefix(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class DisableTokensTransfersCall extends ethereum.Call {
  get inputs(): DisableTokensTransfersCall__Inputs {
    return new DisableTokensTransfersCall__Inputs(this);
  }

  get outputs(): DisableTokensTransfersCall__Outputs {
    return new DisableTokensTransfersCall__Outputs(this);
  }
}

export class DisableTokensTransfersCall__Inputs {
  _call: DisableTokensTransfersCall;

  constructor(call: DisableTokensTransfersCall) {
    this._call = call;
  }
}

export class DisableTokensTransfersCall__Outputs {
  _call: DisableTokensTransfersCall;

  constructor(call: DisableTokensTransfersCall) {
    this._call = call;
  }
}

export class EnableTokensTransfersCall extends ethereum.Call {
  get inputs(): EnableTokensTransfersCall__Inputs {
    return new EnableTokensTransfersCall__Inputs(this);
  }

  get outputs(): EnableTokensTransfersCall__Outputs {
    return new EnableTokensTransfersCall__Outputs(this);
  }
}

export class EnableTokensTransfersCall__Inputs {
  _call: EnableTokensTransfersCall;

  constructor(call: EnableTokensTransfersCall) {
    this._call = call;
  }
}

export class EnableTokensTransfersCall__Outputs {
  _call: EnableTokensTransfersCall;

  constructor(call: EnableTokensTransfersCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LockedBalanceCall extends ethereum.Call {
  get inputs(): LockedBalanceCall__Inputs {
    return new LockedBalanceCall__Inputs(this);
  }

  get outputs(): LockedBalanceCall__Outputs {
    return new LockedBalanceCall__Outputs(this);
  }
}

export class LockedBalanceCall__Inputs {
  _call: LockedBalanceCall;

  constructor(call: LockedBalanceCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LockedBalanceCall__Outputs {
  _call: LockedBalanceCall;

  constructor(call: LockedBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterLockupCall extends ethereum.Call {
  get inputs(): RegisterLockupCall__Inputs {
    return new RegisterLockupCall__Inputs(this);
  }

  get outputs(): RegisterLockupCall__Outputs {
    return new RegisterLockupCall__Outputs(this);
  }
}

export class RegisterLockupCall__Inputs {
  _call: RegisterLockupCall;

  constructor(call: RegisterLockupCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _profile(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _vestingBegin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _vestingEnd(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _lastClaim(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RegisterLockupCall__Outputs {
  _call: RegisterLockupCall;

  constructor(call: RegisterLockupCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardsDistributorCall extends ethereum.Call {
  get inputs(): SetRewardsDistributorCall__Inputs {
    return new SetRewardsDistributorCall__Inputs(this);
  }

  get outputs(): SetRewardsDistributorCall__Outputs {
    return new SetRewardsDistributorCall__Outputs(this);
  }
}

export class SetRewardsDistributorCall__Inputs {
  _call: SetRewardsDistributorCall;

  constructor(call: SetRewardsDistributorCall) {
    this._call = call;
  }

  get newRewardsDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsDistributorCall__Outputs {
  _call: SetRewardsDistributorCall;

  constructor(call: SetRewardsDistributorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetTimeLockRegistryCall extends ethereum.Call {
  get inputs(): SetTimeLockRegistryCall__Inputs {
    return new SetTimeLockRegistryCall__Inputs(this);
  }

  get outputs(): SetTimeLockRegistryCall__Outputs {
    return new SetTimeLockRegistryCall__Outputs(this);
  }
}

export class SetTimeLockRegistryCall__Inputs {
  _call: SetTimeLockRegistryCall;

  constructor(call: SetTimeLockRegistryCall) {
    this._call = call;
  }

  get newTimeLockRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTimeLockRegistryCall__Outputs {
  _call: SetTimeLockRegistryCall;

  constructor(call: SetTimeLockRegistryCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockedBalanceCall extends ethereum.Call {
  get inputs(): UnlockedBalanceCall__Inputs {
    return new UnlockedBalanceCall__Inputs(this);
  }

  get outputs(): UnlockedBalanceCall__Outputs {
    return new UnlockedBalanceCall__Outputs(this);
  }
}

export class UnlockedBalanceCall__Inputs {
  _call: UnlockedBalanceCall;

  constructor(call: UnlockedBalanceCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlockedBalanceCall__Outputs {
  _call: UnlockedBalanceCall;

  constructor(call: UnlockedBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
